import argparse
from analyzer.wavefunction import Wavefunction

def main():
    parser = argparse.ArgumentParser(description="Wavefunction Analysis CLI")
    
    subparsers = parser.add_subparsers(title="subcommands", dest="subcommand", required=True)

    # Sub-parser for the analyze command
    analyze_parser = subparsers.add_parser("analyze", help="Perform analysis for ORCA output file")
    analyze_parser.add_argument("output", help="orca.out: Output file generated by ORCA (ICE-CI, CASSCF...)")
    analyze_parser.add_argument(
        "orbitals",
        help="""\
        orbitals.dict: Dictionary containing the name of the orbitals and their corresponding number in the MR calculation.

        Example of the file content:
        {
            r"Cu}^{3d}": [4, 5, 6, 7, 8],
            r"Cu}^{4s4d}": [13, 21, 23, 24, 25, 33]
        }
        """
    )

    # Sub-parser for the visualize command
    visualize_parser = subparsers.add_parser("visualize", help="Visualize results using the processed wavefunction file excitation_classes.txt")
    visualize_parser.add_argument(
        "excitation_classes",
        nargs='?',
        help="excitation_classes.txt: Text file generated by orca_analyzer containing the summed weights for a given excitation class"
    )
    visualize_parser.add_argument("--thresh_bar", nargs='?', default=0.01, help="Threshold for the bar plot, default is 0.01")
    visualize_parser.add_argument("--thresh_pie", nargs='?', default=0.04, help="Threshold for the pie plot, default is 0.04")
    args = parser.parse_args()

    if args.subcommand == "analyze":
        wavefunction = Wavefunction(args.output, args.orbitals, args.thresh_bar, args.thresh_pie)
        # Read orbitals from orbitals.dict file 
        wavefunction.read_orbitals()
        wavefunction.extract_data()
        wavefunction.analyze()

    if args.subcommand == "visualize":
        if not args.excitation_classes:
            print("Error: The 'visualize' subcommand requires the excitation_classes.txt file.")
            return
        wavefunction = Wavefunction(None, None, args.thresh_bar, args.thresh_pie)  
        wavefunction.visualize(args.excitation_classes, thresh_bar=float(args.thresh_bar), thresh_pie=float(args.thresh_pie))

if __name__ == "__main__":
    main()