import argparse
from icecream import ic
from analyzer.wavefunction import Wavefunction

def main():
    parser = argparse.ArgumentParser(description="Wavefunction Analysis CLI")
    
    subparsers = parser.add_subparsers(title="subcommands", dest="subcommand", required=True)

    # Sub-parser for the analyze_ct command
    analyze_parser = subparsers.add_parser("analyze_ct", help="Perform local analysis for ORCA output file")
    analyze_parser.add_argument("output", help="orca.out: Output file generated by ORCA (ICE-CI, CASSCF...)")
    analyze_parser.add_argument(
        "orbitals",
        help="""\
        orbitals.dict: Dictionary containing the name of the orbitals and their corresponding number in the MR calculation.

        Example of the file content:
        {
            r"Cu}^{3d}": [4, 5, 6, 7, 8],
            r"Cu}^{4s4d}": [13, 21, 23, 24, 25, 33]
        }
        """
    )

    # Sub-parser for the analyze_degree command
    analyze_parser = subparsers.add_parser("analyze_degree", help="Perform analysis for ORCA output file")
    analyze_parser.add_argument("output", help="orca.out: Output file generated by ORCA (ICE-CI, CASSCF...)")
    analyze_parser.add_argument(
        "orbitals",
        help="""\
        orbitals.dict: Dictionary containing the name of the orbitals and their corresponding number in the MR calculation.

        Example of the file content:
        {
            r"Cu_{3s}": 0, 
            r"Cu_{3p_z}": 1, 
            r"Cu_{3p_x}": 2, 
            r"Cu_{3p_y}": 3, 
            r"d_{xz}": 4, 
            r"d_{yz}": 5, 
            r"d_{x^2-y^2}": 6, 
            r"d_{xy}": 7, 
            r"d_{z^2}": 17, 
            r"4s": 18,
        }
        """
    )
    analyze_parser.add_argument("ref_csf_threshold", help="""\
                                Threshold to consider CSF in a given root as Reference CSF (It will be outputed explicitly as dz2 -> 4s in the output file), useful for multireference cases. \n
                                example for root 0 to 10:
                                0 0.03
                                1 0.03 
                                2 0.03 
                                3 0.03
                                4 0.03
                                5 0.03
                                6 0.03
                                7 0.03
                                8 0.03
                                9 0.03
                                10 0.04
                                """)

    analyze_parser.add_argument("ref_define", help="""\
                                Define the reference CSF from which excitation are evaluated (e.g. the ROHF configuration),
                                and the LMCT CSF in this format
                                "GS 0,0,1
                                LMCT 15,17"
                                For GS, 0,0,1 refer to the position of the CSF in ORCA output file, (0th root, 0th CSF, list of occupation)
                                For the LMCT, we just need to define the index of electron loss (15) and electron gain (17)
                                """)

    # Sub-parser for the visualize command
    visualize_parser = subparsers.add_parser("visualize", help="Visualize results using the processed wavefunction file excitation_classes.txt")
    visualize_parser.add_argument(
        "excitation_classes",
        nargs='?',
        help="excitation_classes.txt: Text file generated by orca_analyzer containing the summed weights for a given excitation class"
    )
    visualize_parser.add_argument("-tb", "--thresh_bar", nargs='?', default=0.01, help="Threshold for the bar plot, default is 0.01")
    visualize_parser.add_argument("-tp", "--thresh_pie", nargs='?', default=0.04, help="Threshold for the pie plot, default is 0.04")
    visualize_parser.add_argument("-da", "--degree_analysis_vis", action = "store_true", help="Visualize the results from degree analysis", default=False)
    args = parser.parse_args()

    if args.subcommand == "analyze_ct":
        wavefunction = Wavefunction(args.output, args.orbitals)
        wavefunction.read_orbitals()
        wavefunction.extract_data()
        wavefunction.local_analysis()

    if args.subcommand == "analyze_degree":
        wavefunction = Wavefunction(args.output, args.orbitals, ref_csf_threshold=args.ref_csf_threshold, ref_define=args.ref_define)
        wavefunction.read_orbitals()
        wavefunction.extract_data()
        wavefunction.reference_csf()
        wavefunction.degree_analysis()

    if args.subcommand == "visualize":
        if not args.excitation_classes:
            print("Error: The 'visualize' subcommand requires the excitation_classes.txt file.")
            return
        wavefunction = Wavefunction(None, None, args.thresh_bar, args.thresh_pie, degree_analysis_vis=args.degree_analysis_vis)  
        wavefunction.visualize(args.excitation_classes, thresh_bar=float(args.thresh_bar), thresh_pie=float(args.thresh_pie))

if __name__ == "__main__":
    main()
